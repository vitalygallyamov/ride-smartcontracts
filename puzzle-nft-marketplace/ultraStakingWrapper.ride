{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let usdnAssetId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'

let eagleBuyerAddress = Address(base58'3P7FFQkgALLZDJpCf3smY517wjgPMswGoRP')
let signArtIssuerAddress = Address(base58'3PDBLdsUrcsiPxNbt8g2gQVoefKgzt3kJzV')
let createNFTAddress = Address(base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By')
let ultraStakingAddress = Address(base58'3PKUxbZaSYfsR7wu2HaAgiirHYwAMupDrYW')
let marketFeeAddress = Address(base58'3PKvcEmyHvo2PRsKhpKrDjmSNmnsuHn3UBR')
let DAOBankAddress = Address(base58'3PNDf51CQWHCRVMhLrbyid8zv8Uea6nVeAx')

func checkNFTValidity(assetId: ByteVector) = match getString(Address(base58'3P7FFQkgALLZDJpCf3smY517wjgPMswGoRP'), (("art_" + toBase58String(assetId)) + "_type")) {
    case x: String => 5
    case _ => 
      if (getString(Address(base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By'), "nft_" + toBase58String(assetId) + "_issuer") == "3PMki5sHBsQb4KgDknbUwsL3YgxaCzaZnCJ")
      then {1} else {0}
}

func totalAddressPower() = match getInteger(ultraStakingAddress, this.toString() + "_staked") {
  case x: Int => x
  case _ => 0
}

func isCompatibleNFT(asset: Asset) = {
  let isEagleNFT = match(getString(eagleBuyerAddress, "art_" + toBase58String(asset.id) + "_type")) {
    case s:String => s == "eagle"
    case _ => false
  }
  let isAniaNFT = match(getString(createNFTAddress, "nft_" + toBase58String(asset.id) + "_issuer")) {
    case s:String => s == "3PMki5sHBsQb4KgDknbUwsL3YgxaCzaZnCJ"
    case _ => false
  }

  isEagleNFT || isAniaNFT
}

func calcAssetReward(assetId: String, reward: Int, totalPower: Int) = {
  let assetPower = fraction(10000, checkNFTValidity(fromBase58String(assetId)), 5)
  fraction(assetPower, reward, totalPower)
}

func updateRewards(listData: List[String], reward: Int, totalPower: Int, skeepAssetId: String) = {

  func iterate(accum: List[String], next: String) = {
    let data = next.split("_") # assetId_usdnReward
    if (data[0].size() > 0) then {
      if (skeepAssetId.size() > 0 && skeepAssetId == data[0]) then {
        accum
      } else {
        let nftReward = (if (reward > 0) then calcAssetReward(data[0], reward, totalPower) else 0) + parseInt(data[1]).value()
        accum :+ (data[0] + "_" + nftReward.toString())
      }
    } else {
      accum
    }
  }

  FOLD<230>(listData, [], iterate)
}

func getNftReward(assetId: String, data: String) = {
  if (data.size() > 0 && assetId.size() > 0) then {
    let index = data.indexOf(assetId).valueOrElse(-1)
    if (index >= 0) then {
      let droped = data.drop(index + assetId.size() + 1)
      if (droped.contains(";")) then {
        droped.split(";")[0].parseInt()
      } else droped.parseInt()
    } else 0
  } else 0
}

# Check nft asset
func isNftAsset(asset: Asset) = {
  asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1 &&
  (asset.issuer == createNFTAddress || asset.issuer == signArtIssuerAddress)
}

# issue fake NFT for market
func getDataForIssueNFT(asset: Asset) = {
  # if eagle from SignArt
  if (asset.issuer == signArtIssuerAddress) then {
    # Parsing a string by pattern 
    # Creator: (creatorStr), ArtID: (artIdStr), SignID: (signIdStr), Artwork name: (artWorkName), Issue: (issueStr)
    # But if the string changes, everything breaks
    let partsOfString = asset.description.split(",")
    let creatorStr = partsOfString[0].split(":")[1].drop(1)
    let artIdStr = partsOfString[1].split(":")[1].drop(1)
    #let artWorkName = partsOfString[2].split(":")[1].drop(1)

    let name = getStringValue(signArtIssuerAddress, "art_name_" + artIdStr + "_" + creatorStr)
    let artDesc = getStringValue(signArtIssuerAddress, "art_desc_" + artIdStr + "_" + creatorStr)
    let artUrl = getStringValue(signArtIssuerAddress, "art_display_cid_" + artIdStr + "_" + creatorStr)

    let descPrefix = "Created by " + creatorStr + ". " + name + ". "
    let desc = if (artDesc.size() > 0) then descPrefix+artDesc else descPrefix+"NFT from signArt"
    let imageLink = "https://ipfs.io/ipfs/" + artUrl

    if (name.size() > 0 && artUrl.size() > 0) then {

      # return data for issue
      [name.take(16), desc.take(1000), imageLink, "signArt"]
    }
    else throw("Wrong data for create eagle")
  } else if(asset.issuer == createNFTAddress) then {
    let assetIdStr = toBase58String(asset.id)
    let imageUrl = getStringValue(createNFTAddress, "nft_" + assetIdStr + "_image")

    # return data for issue
    [asset.name, asset.description, imageUrl, "ania"]
  }
  else throw("Data for create NFT didn't create")
}

@Callable(i)
func lock() = {
  let addressStr = i.caller.toString()
  let assetId = i.payments[0].value().assetId.value()

  let asset = assetInfo(assetId).value()
  let assetDesc = asset.description

  if (i.payments[0].value().amount == 1 && asset.isNftAsset() && asset.isCompatibleNFT()) then {

    strict totalPower = totalAddressPower()
    strict usdnBalanceBefore = assetBalance(this, usdnAssetId)
    strict issueParams = getDataForIssueNFT(asset)
    strict invStake = invoke(ultraStakingAddress, "stake", [], [i.payments[0]]) # try to stake NFT
    strict usdnBalanceAfter = assetBalance(this, usdnAssetId)
    
    strict reward = usdnBalanceAfter - usdnBalanceBefore

    let rewardHistory = getString("reward_history").valueOrElse("")
    let updatedData = updateRewards(rewardHistory.split_4C(";"), reward, totalPower, assetId.toBase58String())
    let addData = if (rewardHistory.contains(assetId.toBase58String() + "_")) then {
      updatedData
    } else {
      updatedData ++ [assetId.toBase58String() + "_0"]
    }

    # try issue fake NFT for market
    strict fakeIssueIdStr = match(invoke(createNFTAddress, "createNFT", issueParams, [])) {
      case s:String => s
      case _ => throw("Something went wrong during creation of NFT")
    }
    (
      [
        ScriptTransfer(i.caller, 1, fakeIssueIdStr.fromBase58String()),

        StringEntry("nft_" + fakeIssueIdStr + "_assetId", toBase58String(asset.id)),
        StringEntry("nft_" + fakeIssueIdStr + "_caller", addressStr),
        StringEntry("nft_" + fakeIssueIdStr + "_owner", i.originCaller.toString()),
        StringEntry("reward_history", addData.makeString_2C(";"))
      ],
      fakeIssueIdStr
    )
  }
  else throw("Ivalid NFT attached")
}

@Callable(i)
func unlock() = {
  let addressStr = i.caller.toString()
  let assetId = i.payments[0].value().assetId.value()

  let callerAddress = getStringValue(this, "nft_" + toBase58String(assetId) + "_caller")
  let ownerAddress = getStringValue(this, "nft_" + toBase58String(assetId) + "_owner")
  let originalNftAssetIdStr = getStringValue(this, "nft_" + toBase58String(assetId) + "_assetId")

  let nftAsset = assetInfo(assetId).value()
  if (i.payments[0].value().amount == 1 && nftAsset.isNftAsset() && addressStr == callerAddress) then {
    
    strict totalPower = totalAddressPower()
    strict usdnBalanceBefore = assetBalance(this, usdnAssetId)
    strict invUnStake = invoke(ultraStakingAddress, "unStake", [originalNftAssetIdStr], []) # try to unstake NFT
    strict invBurn = invoke(createNFTAddress, "burnNFT", [], [i.payments[0]])

    # calc reward
    strict usdnBalanceAfter = assetBalance(this, usdnAssetId)
    strict reward = usdnBalanceAfter - usdnBalanceBefore

    strict rewardHistory = getString("reward_history").valueOrElse("")
    strict updatedData = updateRewards(rewardHistory.split_4C(";"), reward, totalPower, originalNftAssetIdStr)

    strict nftReward = originalNftAssetIdStr.getNftReward(rewardHistory).value() + originalNftAssetIdStr.calcAssetReward(reward, totalPower)

    strict rewardTransaction = if (nftReward > 0) then {
      # market fee
      let marketFee = fraction(nftReward, 1, 100)
      let DAOFee = fraction(nftReward, 2, 100)
      [
        ScriptTransfer(marketFeeAddress, marketFee, usdnAssetId),
        ScriptTransfer(DAOBankAddress, DAOFee, usdnAssetId),
        ScriptTransfer(Address(ownerAddress.fromBase58String()), nftReward - marketFee - DAOFee, usdnAssetId)
      ]
    } else []
    
    ([
      ScriptTransfer(i.caller, 1, originalNftAssetIdStr.fromBase58String()),

      DeleteEntry("nft_" + toBase58String(assetId) + "_assetId"),
      DeleteEntry("nft_" + toBase58String(assetId) + "_caller"),
      DeleteEntry("nft_" + toBase58String(assetId) + "_owner"),

      StringEntry("reward_history", updatedData.makeString_2C(";"))
    ] ++ rewardTransaction,
    originalNftAssetIdStr)
  }
  else throw("Ivalid NFT attached")
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        