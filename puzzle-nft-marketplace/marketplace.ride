{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let USDTAssetId = base58'34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ'

let createNftDapp = base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By'
let marketFeeAddress = Address(base58'3PKvcEmyHvo2PRsKhpKrDjmSNmnsuHn3UBR')
let DAOAddress = Address(base58'3P975LUuqc7uBPiSxp3nemf2FZh62zfirSh')
let puzzleStakeAddress = base58'3PFTbywqxtFfukX3HyT881g4iW5K4QL3FAS'
let proxyDappAddress = base58'3P6fAxtw12pjFhayEfpcUWxgu2BHVCeP78A'

let adminAddress = Address(base58'3PJKmXoHJvVeQXjSJdhtkUcFDtdiQqMbUTD')

# wrapper contracts
let nftDuckWrapper = base58'3P3pDosq4GCwfJkvq4yqKvvoTwmoqc9qPmo'
let nftSignArtWrapper = base58'3PPgeYTWMRZ7S7jSLpnVuKKB9r6XuDk3ndC'
let nftWavesDomainsWrapper = base58'3P6EXY5LjsD8xth9GHemxemFHqCL4QzJSaU'

let duckFeeAddress = base58'3P6AobNbcQ3ZjcRY37mJPKN8PP9Giz8kgeY'

let ducksPercent = 30
let royaltyPercent = 7

func isNFT(asset: Asset) = {
  asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

func checkNFT(asset: Asset) = {
  asset.issuer.bytes == createNftDapp && asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

func tryGetInteger(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
      case _ => 0
  }
}

func tryGetString(key: String) = {
  match getString(this, key) {
      case b:String => b
      case _ => ""
  }
}

func tryGetAssetInfo(assetId: String, errorMsg: String) = {
  match assetInfo(assetId.fromBase58String()) {
    case a:Asset => a
    case _ => throw(errorMsg)
  }
}

func getAssetString(assetId: ByteVector|Unit) = {
  match assetId {
    case b:ByteVector => b.toBase58String()
    case _ => "WAVES"
  }
}

func getAssetBytes(assetIdStr: String) = {
  if (assetIdStr == "WAVES") then {unit} else {assetIdStr.fromBase58String()}
}

# when user approve bet or cancel sell nft or after buy nft, we need return all asset to bets owners
func allTransfersForBid(nftId: String, exclude: String) = {
  let auctionKey = "auction_" + nftId + "_bids"
  let auctionData = tryGetString(auctionKey)

  let excludeId = if (exclude.size() > 0) then exclude else ""
  if (auctionData.size() == 0) then [] else {
    func getReturnTransactions(accum: List[ScriptTransfer], next: String) = {
      let betParsedData = next.split("_")
      let betOwner = betParsedData[0]
      let betAmount = parseIntValue(betParsedData[1])
      let betAssetId = if (betParsedData[2] == "WAVES") then {unit} else {
        betParsedData[2].fromBase58String()
      }
      if (excludeId.size() > 0 && excludeId == next) then accum else {
        accum :+ ScriptTransfer(Address(betOwner.fromBase58String()), betAmount, betAssetId)
      }
    }
    FOLD<26>(auctionData.split(","), [], getReturnTransactions)
  }
}

func isAddressBan(address: String) = {
  match (getBoolean("address_" + address + "_banned")) {
    case t:Boolean => t
    case _ => false
  }
}

@Callable(i)
func sellNFT(buyOutPrice: Int, buyOutAssetId: String, sellerComment: String) = {

  let pmt = if i.payments.size() == 1 && i.payments[0].amount == 1
    then i.payments[0]
    else throw("NFT not listed as payment")

  let isFree = buyOutAssetId == "free"
  let buyOutAsset = if (isFree) then unit else buyOutAssetId.getAssetBytes()

  if (isAddressBan(i.originCaller.toString())) then throw("You are banned")
  else if (isDefined(pmt.assetId)) then {
    let nftId = value(pmt.assetId)
    let nft = match assetInfo(nftId) {
      case a:Asset => a
      case _ => throw("Can't find NFT")
    }

    if (checkNFT(nft)) then {
      if (isFree || buyOutPrice > 0) then {

        let assetNameStr = toBase58String(nft.id)
        let nftIssuer = match getString(Address(createNftDapp), "nft_" + assetNameStr + "_issuer") {
          case a: String => a
          case _ => i.caller.toString()
        }
        let royaltyReceiver = if (nftIssuer != nftSignArtWrapper.toBase58String()) then {
          nftIssuer
        } else {
          assetInfo(nftId).value().description.split_4C(".")[0].split_4C(" ")[2]
        }
        
        [
          IntegerEntry("nft_" + assetNameStr + "_buyOutPrice", if (isFree) then 0 else buyOutPrice),
          StringEntry("nft_" + assetNameStr + "_buyOutAssetId", if (isFree) then "free" else buyOutAsset.getAssetString()),
          StringEntry("nft_" + assetNameStr + "_royaltyReceiver", royaltyReceiver),
          StringEntry("nft_" + assetNameStr + "_sellerComment", sellerComment),
          StringEntry("nft_" + assetNameStr + "_seller", i.originCaller.toString()),
          StringEntry("address_" + i.originCaller.toString() + "_nft_" + assetNameStr, assetNameStr),
          IntegerEntry("address_" + i.originCaller.toString() + "_nft_" + assetNameStr + "_startSaleAt", height)
        ]

      } else throw("Price must be greater than zero")
    } else throw("NFT issued by another dapp")
  } else throw("NFT is not attached to the transaction")
}

@Callable(i)
func buyNFT(nftId: String) = {
  let pmt = if i.payments.size() == 1
    then i.payments[0]
    else throw("Attached payment is required")

  let buyOutPrice = tryGetInteger("nft_" + nftId + "_buyOutPrice")
  let buyOutAssetIdStr = tryGetString("nft_" + nftId + "_buyOutAssetId")
  let royaltyReceiver = tryGetString("nft_" + nftId + "_royaltyReceiver")
  let sellerStr = tryGetString("nft_" + nftId + "_seller")

  let isFree = buyOutAssetIdStr == "free"
  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  let buyOutAssetId = if (isFree || buyOutAssetIdStr == "WAVES") then {unit} else {
    match assetInfo(buyOutAssetIdStr.fromBase58String()) {
      case a:Asset => a.id
      case _ => throw("Buyout asset not found")
    }
  }
  let auctionKey = "auction_" + nftAsset.id.toBase58String() + "_bids"

  if ((isFree && buyOutPrice == 0) || (buyOutPrice > 0 && pmt.amount >= buyOutPrice)) then {

    # if duck nft, send fee to ducks
    let duckNftId = getString(Address(nftDuckWrapper), "nft_" + nftId + "_duckId").valueOrElse("")
    let transferFees = if (duckNftId.size() > 0) then {
      # calculate duck fee
      let duckFee = fraction(buyOutPrice, ducksPercent, 100)
      [
        ScriptTransfer(Address(sellerStr.fromBase58String()), buyOutPrice - duckFee, buyOutAssetId),
        ScriptTransfer(Address(duckFeeAddress), duckFee, buyOutAssetId)
      ]
    } else {
      # calculate royalty
      let royaltyPart = fraction(buyOutPrice, royaltyPercent, 100)
      let marketFee = fraction(buyOutPrice, 1, 100)
      let DAOFee = fraction(buyOutPrice, 2, 100)
      [
        ScriptTransfer(Address(sellerStr.fromBase58String()), buyOutPrice - royaltyPart - marketFee - DAOFee, buyOutAssetId),
        ScriptTransfer(Address(royaltyReceiver.fromBase58String()), royaltyPart, buyOutAssetId),
        ScriptTransfer(marketFeeAddress, marketFee, buyOutAssetId),
        ScriptTransfer(DAOAddress, DAOFee, buyOutAssetId)
      ]
    }

    if (isFree || pmt.assetId == buyOutAssetId) then {
      let isGroup = getBoolean(Address(createNftDapp), "nft_" + nftId + "_isGroup").valueOrElse(false)
      if (!isGroup) then {
        ([
          ScriptTransfer(i.caller, 1, nftAsset.id),

          DeleteEntry("nft_" + nftId + "_buyOutPrice"),
          DeleteEntry("nft_" + nftId + "_buyOutAssetId"),
          DeleteEntry("nft_" + nftId + "_royaltyReceiver"),
          DeleteEntry("nft_" + nftId + "_sellerComment"),
          DeleteEntry("nft_" + nftId + "_seller"),
          DeleteEntry("nft_" + nftId + "_pinned"),
          DeleteEntry("nft_" + nftId + "_pinnedHeight"),
          DeleteEntry("address_" + sellerStr + "_nft_" + nftId),
          DeleteEntry("address_" + sellerStr + "_nft_" + nftId + "_startSaleAt"),
          DeleteEntry(auctionKey)
        ] ++ transferFees ++ allTransfersForBid(nftAsset.id.toBase58String(), ""), nftAsset.id.toBase58String())
      } else {
        strict newNFTIdStr = match invoke(Address(createNftDapp), "mintFromGroup", [nftId], []) {
          case s:String => s
          case _ => throw("Somthing wrong when mint multiple NFT")
        }
        strict groupAvailable = getInteger(Address(createNftDapp), "group_" + nftId + "_available").value()
        #strict groupSize = getInteger(Address(createNftDapp), "group_" + nftId + "_size").value()
        if (groupAvailable == 0) then {
          strict inv = invoke(Address(createNftDapp), "burnNFT", [], [AttachedPayment(nftId.fromBase58String(), 1)])
          ([
            ScriptTransfer(i.caller, 1, newNFTIdStr.fromBase58String()),

            DeleteEntry("nft_" + nftId + "_buyOutPrice"),
            DeleteEntry("nft_" + nftId + "_buyOutAssetId"),
            DeleteEntry("nft_" + nftId + "_royaltyReceiver"),
            DeleteEntry("nft_" + nftId + "_sellerComment"),
            DeleteEntry("nft_" + nftId + "_seller"),
            DeleteEntry("nft_" + nftId + "_pinned"),
            DeleteEntry("nft_" + nftId + "_pinnedHeight"),
            DeleteEntry("address_" + sellerStr + "_nft_" + nftId),
            DeleteEntry("address_" + sellerStr + "_nft_" + nftId + "_startSaleAt"),
            DeleteEntry(auctionKey)
          ] ++ transferFees, newNFTIdStr)
        } else {
          ([
            ScriptTransfer(i.caller, 1, newNFTIdStr.fromBase58String())
          ] ++ transferFees, newNFTIdStr)
        }
      }
    } else throw("The buyout asset does not match the purchase asset")
  } else throw("Payment amount must be greater than zero")
}

@Callable(i)
func cancelSell(nftId: String) = {
  let sellerStr = tryGetString("nft_" + nftId + "_seller")

  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  let auctionKey = "auction_" + nftAsset.id.toBase58String() + "_bids"

  if (size(sellerStr) > 0 && (sellerStr == i.originCaller.toString() || adminAddress == i.originCaller)) then {
    ([
      ScriptTransfer(i.caller, 1, nftAsset.id),

      DeleteEntry("nft_" + nftId + "_buyOutPrice"),
      DeleteEntry("nft_" + nftId + "_buyOutAssetId"),
      DeleteEntry("nft_" + nftId + "_royaltyReceiver"),
      DeleteEntry("nft_" + nftId + "_sellerComment"),
      DeleteEntry("nft_" + nftId + "_seller"),
      DeleteEntry("nft_" + nftId + "_pinned"),
      DeleteEntry("nft_" + nftId + "_pinnedHeight"),
      DeleteEntry("address_" + sellerStr + "_nft_" + nftId),
      DeleteEntry("address_" + sellerStr + "_nft_" + nftId + "_startSaleAt"),
      DeleteEntry(auctionKey)
    ] ++ allTransfersForBid(nftAsset.id.toBase58String(), ""), nftId)
  } else throw("You are not a seller")
}

@Callable(i)
func pin(nftId: String) = {
  let sellerStr = tryGetString("nft_" + nftId + "_seller")
  let isPinned = getBoolean("nft_" + nftId + "_pinned").valueOrElse(false)
  let pinnedHeight = getInteger("nft_" + nftId + "_pinnedHeight").valueOrElse(0)
  let blocks24h = 60 * 24

  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  let isDaoStaker = match(getString(DAOAddress, "all_staked_addresses")) {
    case s:String => isDefined(s.indexOf(i.caller.toString()))
    case _ => false
  }

  if (sellerStr.size() == 0) then throw("Seller not found")
  else if (isPinned) then throw("NFT alredy pinned")
  else if (height - pinnedHeight <= blocks24h) then throw("Time hasn't run out")
  else if (sellerStr != i.originCaller.toString()) then throw("You are not a seller")
  else {
    let paymentTransfer =
      if (isDaoStaker) then [] 
      else if (i.payments.size() == 0) then throw("No payment")
      else if (
        i.payments[0].assetId.valueOrErrorMessage("Only USDT") != USDTAssetId ||
        i.payments[0].amount < 7_000_000
      ) then throw("Only 7 USDT")
      else
      {
        let half = fraction(i.payments[0].amount, 1, 2)
        [
          ScriptTransfer(marketFeeAddress, half, USDTAssetId),
          ScriptTransfer(DAOAddress, i.payments[0].amount - half, USDTAssetId)
        ]
      }
    [
      BooleanEntry("nft_" + nftAsset.id.toBase58String() + "_pinned", true),
      IntegerEntry("nft_" + nftAsset.id.toBase58String() + "_pinnedHeight", height + blocks24h)
    ] ++ paymentTransfer
  }
}

@Callable(i)
func unpin(nftId: String) = {
  let sellerStr = tryGetString("nft_" + nftId + "_seller")
  let isPinned = getBoolean("nft_" + nftId + "_pinned").valueOrElse(false)

  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  let isDaoStaker = match(getString(DAOAddress, "all_staked_addresses")) {
    case s:String => isDefined(s.indexOf(i.caller.toString()))
    case _ => false
  }

  if (sellerStr.size() == 0) then throw("Seller not found")
  else if (!isPinned) then throw("NFT not pinned")
  else if (sellerStr != i.originCaller.toString()) then throw("You are not a seller")
  else {
    [
      DeleteEntry("nft_" + nftAsset.id.toBase58String() + "_pinned"),
      DeleteEntry("nft_" + nftAsset.id.toBase58String() + "_pinnedHeight")
    ]
  }
}

@Callable(i)
func ban(address: String) = {
  if (i.caller == adminAddress) then {
    [
      BooleanEntry("address_" + address + "_banned", true)
    ]
  } else throw("Allow only for admin")
}

@Callable(i)
func unBan(address: String) = {
  if (i.caller == adminAddress) then {
    [
      DeleteEntry("address_" + address + "_banned")
    ]
  } else throw("Allow only for admin")
}

@Callable(i)
func like(nftId: String) = {
  let nftAsset = assetInfo(nftId.fromBase58String())

  let duckNftId = getString(Address(nftDuckWrapper), "nft_" + nftId + "_duckId").valueOrElse("")
  let signArtNftId = getString(Address(nftSignArtWrapper), "signArtNft_" + nftId + "_assetId").valueOrElse("")

  let updatedNftId =
    if (duckNftId.size() > 0) then
      {duckNftId}
    else if(signArtNftId.size() > 0) then
      {signArtNftId}
    else
      {nftId}

  if (nftAsset.isDefined() && checkNFT(nftAsset.value())) then {

    let callerAddress = i.caller.toString()
    let countStaked = match getInteger(Address(puzzleStakeAddress), callerAddress + "_staked") {
      case c:Int => c
      case _ => 0
    }

    if (countStaked >= 1_0000_0000) then {
      let nftLikesKey = "nft_" + updatedNftId + "_likes"
      let nftLikesValue = tryGetString("nft_" + updatedNftId + "_likes")

      if (!nftLikesValue.indexOf(callerAddress).isDefined()) then {
        let newLikesValue = if (nftLikesValue.size() == 0 ) then {
          i.caller.toString()
        } else {
          nftLikesValue + "," + callerAddress
        }

        [
          StringEntry(nftLikesKey, newLikesValue)
        ]
      } else throw("You have already voted")
    } else throw("You can like if you stake 1 or more Puzzles")
  } else throw("Invalid NFT id")
  
}

@Callable(i)
func placeBid(nftId: String) = {
  let isGroup = getBoolean(Address(createNftDapp), "nft_" + nftId + "_isGroup").valueOrElse(false)
  if (isGroup) then throw("This function is not temporarily available for multiple NFTs")
  else if (i.payments[0].amount > 0 &&
    (!i.payments[0].assetId.isDefined() || !isNFT(assetInfo(i.payments[0].assetId.value()).value()))) then {

    let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
    let nftAmount = match assetBalance(this, nftAsset.id) {
      case c:Int => c
      case _ => 0
    }

    let sellerStr = getStringValue("nft_" + nftId + "_seller")
    if (sellerStr != i.caller.toString()) then {
      if (nftAmount == 1 && nftAsset.checkNFT()) then {
        let callerStr = i.caller.toString()
        let assetAmount = i.payments[0].amount
        let assetIdStr = i.payments[0].assetId.getAssetString()

        let auctionKey = "auction_" + nftAsset.id.toBase58String() + "_bids"
        let auctionData = tryGetString(auctionKey)
        let addedData = callerStr + "_" + assetAmount.toString() + "_" + assetIdStr

        if (auctionData.split(",").size() + 1 < 21) then {
          let exist = auctionData.contains(i.caller.toString())

          if (!exist) then {
            let updatedData = match getString(auctionKey) {
              case s:String => s + "," + addedData
              case _ => addedData
            }

            [
              StringEntry(auctionKey, updatedData)
            ]
          } else throw("You have already bid")
        } else throw("You cannot create more than 27 bets for 1 NFT")
      } else throw("Invalid NFT Id.")
    } else throw("Seller cannot bid")
  } else throw("Payment not attached")
}

@Callable(i)
func cancelBid(nftId: String, betId: String) = {
  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  let auctionKey = "auction_" + nftAsset.id.toBase58String() + "_bids"

  let auctionData = tryGetString(auctionKey)

  if (auctionData.size() > 0) then {
    let callerStr = i.caller.toString()
    let bets = auctionData.split(",")

    let betIndex = match bets.indexOf(betId) {
      case idx: Int => idx
      case _ => throw("Bet not found by id")
    }

    let betData = bets.getElement(betIndex)
    let betParsedData = betData.split("_")

    let betOwner = betParsedData[0]
    let betAmount = parseIntValue(betParsedData[1])
    let betAssetId = if (betParsedData[2] == "WAVES") then {unit} else {
      betParsedData[2].fromBase58String()
    }

    if (betOwner == callerStr) then {
      let newBets = bets.removeByIndex(betIndex)

      let updateDataList = if (newBets.size() == 0) then {
        [DeleteEntry(auctionKey)]
      } else {
        [StringEntry(auctionKey, newBets.makeString(","))]
      }

      [
        ScriptTransfer(i.caller, betAmount, betAssetId)
      ] ++ updateDataList

    } else throw("This is not your bet")
  } else throw("Bet not found")
}

@Callable(i)
func acceptBid(nftId: String, betId: String) = {
  let nftAsset = tryGetAssetInfo(nftId, "NFT not found")
  if (assetBalance(this, nftAsset.id) == 1) then {
    let sellerStr = tryGetString("nft_" + nftId + "_seller")
    let auctionKey = "auction_" + nftAsset.id.toBase58String() + "_bids"

    if (sellerStr == i.caller.toString()) then {
      let auctionData = tryGetString(auctionKey)

      if (auctionData.size() > 0) then {
        let bets = auctionData.split(",")

        let betParsedData = betId.split("_")

        let betOwner = betParsedData[0]
        let betAmount = parseIntValue(betParsedData[1])
        let betAssetId = if (betParsedData[2] == "WAVES") then {unit} else {
          betParsedData[2].fromBase58String()
        }

        # calculate royalty
        let royaltyReceiver = tryGetString("nft_" + nftId + "_royaltyReceiver")
        let royaltyPart = fraction(betAmount, royaltyPercent, 100)
        let marketFee = fraction(betAmount, 1, 100)
        let DAOFee = fraction(betAmount, 2, 100)

        # use `strict` because `proxy.unlock` erases data entries
        strict isWavesDomainsWrappedToken = 
          Address(nftWavesDomainsWrapper).getString("Wrapped_" + nftId + "tokenId").isDefined()

        strict unlockedNftStr = match invoke(Address(proxyDappAddress), "unlock", [], [AttachedPayment(nftId.fromBase58String(), 1)]) {
          case s:String => s
          case _ => throw("Somthing wrong when unlock NFT in address: " + proxyDappAddress.toBase58String())
        }

        if (bets.containsElement(betId) && betAmount > 0) then {
          let transferUnlockedNft = 
            if isWavesDomainsWrappedToken then {
              strict transferWavesDomainsTokenWithOwnership = invoke(
                Address(nftWavesDomainsWrapper), 
                "transfer", 
                [betOwner], 
                [AttachedPayment(unlockedNftStr.fromBase58String(), 1)]
              )

              []
            } else
              [
                ScriptTransfer(Address(betOwner.fromBase58String()), 1, unlockedNftStr.fromBase58String())
              ]

          transferUnlockedNft ++ [
            ScriptTransfer(i.caller, betAmount - royaltyPart - marketFee - DAOFee, betAssetId),
            ScriptTransfer(Address(royaltyReceiver.fromBase58String()), royaltyPart, betAssetId),
            ScriptTransfer(marketFeeAddress, marketFee, betAssetId),
            ScriptTransfer(DAOAddress, DAOFee, betAssetId),

            DeleteEntry("nft_" + nftId + "_buyOutPrice"),
            DeleteEntry("nft_" + nftId + "_buyOutAssetId"),
            DeleteEntry("nft_" + nftId + "_royaltyReceiver"),
            DeleteEntry("nft_" + nftId + "_sellerComment"),
            DeleteEntry("nft_" + nftId + "_seller"),
            DeleteEntry("nft_" + nftId + "_pinned"),
            DeleteEntry("nft_" + nftId + "_pinnedHeight"),
            DeleteEntry("address_" + sellerStr + "_nft_" + nftId),
            DeleteEntry("address_" + sellerStr + "_nft_" + nftId + "_startSaleAt"),
            DeleteEntry(auctionKey)
          ] ++ allTransfersForBid(nftAsset.id.toBase58String(), betId)
        } else throw("Bet not found by Id")
      } else throw("Bet not found")
    } else throw("You are not a seller")
  } else throw("NFT not found on contract") 
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
