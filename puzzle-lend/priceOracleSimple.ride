{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let lastUpdatedBlockKey = "lastUpdatedBlock"

let wcapPubKey = base58'FcWW78jEZvLXMVC84C4KpMVKSVvjgSvhAe2XUEQYBKuu'

let n15List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
let n60List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

func getPriceDataKey(block: Int, tokenId: String) = {
    "block_" + block.toString() + "_" + tokenId
}

func getLastUpdatedBlock() = {
  let lastUpdatedBlock = getInteger(lastUpdatedBlockKey).valueOrErrorMessage("Last updated block key not found")
  if (lastUpdatedBlock <= 0) then throw("Invalid block value")
  else if (height - lastUpdatedBlock > 10) then throw("The price has not been updated for a long time")
  else lastUpdatedBlock
}

# Find price by type and block number
# type: tokenId - Asset Id
# type: block - Block number
func getPriceValue(tokenId: String, block: Int) = {
    getInteger(getPriceDataKey(block, tokenId)).valueOrElse(0)
}

# for loop get prices
func getPriceList(accum: (List[Int], Int, String, Int), next: Int) = {
  let (result, block, tokenId, sum) = accum
  let priceValue = getPriceValue(tokenId, block)
  let nextBlock = block - next

  if (priceValue > 0) then {
      (result :+ priceValue, nextBlock, tokenId, sum + priceValue)
  } else (result, nextBlock, tokenId, sum)
}

@Callable(i)
func getPrice(tokenId: String, debug: Boolean) = {
  # todo: add pools value
  let lastUpdatedBlock = getLastUpdatedBlock()
  let price = getPriceValue(tokenId, lastUpdatedBlock)
  if (debug) then
    throw("price: " + price.toString())
  else
    ([], (price, price))
}

@Callable(i)
func getPriceAt(block: Int, tokenId: String, debug: Boolean) = {
  # todo: add pools value
  let price = getPriceValue(tokenId, block)
  if (debug) then
    throw("price: " + price.toString())
  else
    ([], (price, price))
}

@Callable(i)
func getTWAP60(tokenId: String, debug: Boolean) = {
  let lastUpdatedBlock = getLastUpdatedBlock()

  # get list prices for 60 blocks
  let tuple = (FOLD<60>(n60List, ([], lastUpdatedBlock, tokenId, 0), getPriceList))
  let pricesList = tuple._1
  let sum = tuple._4
  let average = fraction(sum, 1_000_000, fraction(pricesList.size(), 1_000_000, 1))

  let isLocked = getBoolean(tokenId + "_locked").valueOrElse(false)

  if (debug) then
    throw("average: " + average.toString() + ", priceListSize: " + pricesList.size().toString() + ", sum: " + sum.toString())
  else if (isLocked) then throw("Token: " + tokenId + " locked")
  else
    ([], (average, average))
}

@Callable(i)
func getTWAP15(tokenId: String, debug: Boolean) = {
  let lastUpdatedBlock = getLastUpdatedBlock()

  # get list prices for 15 blocks
  let tuple = (FOLD<15>(n15List, ([], lastUpdatedBlock, tokenId, 0), getPriceList))
  let pricesList = tuple._1
  let sum = tuple._4
  let average = fraction(sum, 1_000_000, fraction(pricesList.size(), 1_000_000, 1))

  let isLocked = getBoolean(tokenId + "_locked").valueOrElse(false)

  if (debug) then
    throw("average: " + average.toString() + ", priceListSize: " + pricesList.size().toString() + ", sum: " + sum.toString())
  else if (isLocked) then throw("Token: " + tokenId + " locked")
  else
    ([], (average, average))
}

@Verifier(tx)
func verify() = {

  func checkData(dTx: DataTransaction) = {
    let dataSize = dTx.data.size()
    func checkItem(item: BinaryEntry|BooleanEntry|DeleteEntry|IntegerEntry|StringEntry) = {
      match(item) {
        case d:IntegerEntry => d.value > 0
        case _ => throw("Only integer data entries update via verifier")
      }
    }
    if (dataSize > 1) then {
      let isPriceUpdate = match(dTx.data[0]) {
        case d:BooleanEntry => d.key == "update_via_verifier" && d.value
        case _ => false
      }
      let isLockUpdate = match(dTx.data[0]) {
        case d:BooleanEntry => d.key == "update_via_locker" && d.value
        case _ => false
      }
      if (isPriceUpdate) then {
        checkItem(dTx.data[1])
      } else isLockUpdate
    } else false
  }

  match (tx) {
    case t:DataTransaction => {
      let pubKey = if (checkData(t)) then {
        wcapPubKey
      } else tx.senderPublicKey
      sigVerify(tx.bodyBytes, tx.proofs[0], pubKey)
    }
    case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}