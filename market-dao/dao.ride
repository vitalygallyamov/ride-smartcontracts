{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let creationAddress = Address(base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By')
let signArtIssuerAddress = Address(base58'3PDBLdsUrcsiPxNbt8g2gQVoefKgzt3kJzV')

let USDTAssetId = base58'34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ'
let PUZZLEAssetId = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'

# global keys
let totalStakedKey = "total_staked"
let totalPowerKey = "total_power"
let totalSpentPowerKey = "total_spentPower"

let votePowerLimitKey = "VOTE_POWER_LIMIT"
let currentRewordsRoundKey = "current_rewords_round"
let finalVotingCandidatesKey = "final_voiting_candidates"

let allStakedAddressesKey = "all_staked_addresses"

let PuzzleDragonsSignArtIds = [
  "9iPLsYoz8fNyUp9qcgeAFPpMjKGcb4mNURhAZ7dfzXej",
  "2K847GdAcqaHHYn1dSS1F3NYriuquJKKzMoBES1cn4Mb",
  "7D1eCVeMbjHLpjYuqKZ96LoWPwD71quwuWpZxcuKnkJ7",
  "zjE5dwTv3AukQj6xMyddjcqA82bKvSNLeaKLhnFYKGf",
  "4T8QSrLLqUpHpi8SecSQT1p5tGo1CAskTGgYgUmXBYEb",
  "AjHkvxJpgxx8UAMmz6gvxjtBanGBHeEUaYxygdsTRcV6",
  "4jruFM1gvrtMHXiKdz2EKt12fHGjH5MT8YcZkF6KVGP7",
  "ZZ1cM8N3UC3uAdoCXJwTwkmpeTSFjpNB4GVa5UwYVGS",
  "6UAvojJpFxUjAoRFb3nhxCRUdGzFCvxCKniLtJqxVk77",
  "2NSvp5JX8YTNXWKXpE9kiZA22gg4DM2Yc7mcb9U6PkxB"
]

# Check NFT and NFT issuer
func checkNFT(asset: Asset) = {
  let isPuzzleDragon = match(PuzzleDragonsSignArtIds.indexOf(asset.id.toBase58String())) {
    case x:Int => x >= 0
    case _ => false
  }
  (isPuzzleDragon || getStringValue(creationAddress, "nft_" + asset.id.toBase58String() + "_issuer") == this.toString()) &&
  asset.issuer == (if isPuzzleDragon then signArtIssuerAddress else creationAddress) &&
  asset.decimals == 0 &&
  asset.reissuable == false &&
  asset.quantity == 1
}

func getPowerNFT(asset: Asset) = {
  let isPuzzleDragon = match(PuzzleDragonsSignArtIds.indexOf(asset.id.toBase58String())) {
    case x:Int => x >= 0
    case _ => false
  }
  if (isPuzzleDragon) then 40 else {
    let params = getStringValue(creationAddress, "nft_" + asset.id.toBase58String() + "_params")
    if params == "gold" then 100 else 40
  }
}

func isVotingClosed(voteId: String) = {
  let voteConfirmedKey = "vote_" + voteId + "_confirmed"
  let voteRejectedKey = "vote_" + voteId + "_rejected"

  let isConfirmed = getBoolean(voteConfirmedKey).valueOrElse(false)
  let isRejected = getBoolean(voteRejectedKey).valueOrElse(false)
  isConfirmed || isRejected
}

# add string to state array
func addStringToStateArray(dataKey: String, item: String) = {
  let allData = getString(dataKey).valueOrElse("")
  if (!isDefined(allData.indexOf(item))) then {
    if (allData.size() == 0) then {
      [StringEntry(dataKey, item)]
    } else {
      [StringEntry(dataKey, (allData.split_51C(",") :+ item).makeString_11C(","))]
    }
  } else {
    []
  }
}

# remove string to state array
func removeItemFromStateArray(dataKey: String, item: String) = {
  let allData = getString(dataKey).valueOrErrorMessage("Data for key: '" + dataKey + "' not found")
  if (isDefined(allData.indexOf(item))) then {
    let dataList = allData.split_51C(",")
    let itemIndex = dataList.indexOf(item).value()
    [StringEntry(dataKey, dataList.removeByIndex(itemIndex).makeString_11C(","))]
  } else {
    []
  }
}

func removeItemFromStr(str: String, item: String) = {
  if (isDefined(str.indexOf(item))) then {
    let dataList = str.split_51C(",")
    let itemIndex = dataList.indexOf(item).value()
    dataList.removeByIndex(itemIndex).makeString_11C(",")
  } else {
    str
  }
}

@Callable(i)
func stake(debug: Boolean) = {
  let addressStr = i.caller.toString()
  let p = if (i.payments.size() > 0) then i.payments[0] else throw("Payments list is empty")
  let asset = assetInfo(p.assetId.valueOrErrorMessage("Invalid payment")).valueOrErrorMessage("Invalid asset Id")
  if (debug) then {
    throw("payments size " + i.payments.size().toString() + " assetId " + p.assetId.value().toBase58String() + " amount " + p.amount.toString())
  }
  else if (p.amount > 0 && asset.checkNFT()) then {
    # global params
    let totalStaked = getInteger(totalStakedKey).valueOrElse(0)
    let totalPower = getInteger(totalPowerKey).valueOrElse(0)

    # address params
    let addressPowerKey = "address_" + addressStr + "_power"
    let addressTotalStakedKey = "address_" + addressStr + "_totalStaked"
    let addressStakedNftsKey = "address_" + addressStr + "_stakedNfts"

    let addressPower = getInteger(addressPowerKey).valueOrElse(0)
    let addressTotalStaked = getInteger(addressTotalStakedKey).valueOrElse(0)
    let addressStakedNfts = getString(addressStakedNftsKey).valueOrElse("")

    if (addressTotalStaked + 1 > 5) then throw("You can stake only 5 NFTs")
    else {
      let nftPower = asset.getPowerNFT()

      let nftIdStr = asset.id.toBase58String()

      let addressStakedNftsState = if (addressStakedNfts.size() == 0) then {
        [StringEntry(addressStakedNftsKey, nftIdStr)]
      } else {
        [StringEntry(addressStakedNftsKey, (addressStakedNfts.split(",") :+ nftIdStr).makeString(","))]
      }

      [
        IntegerEntry(totalStakedKey, totalStaked + 1),
        IntegerEntry(totalPowerKey, totalPower + nftPower),

        StringEntry("nft_" + nftIdStr + "_owner", addressStr),
        IntegerEntry("nft_" + nftIdStr + "_power", nftPower),

        IntegerEntry(addressPowerKey, addressPower + nftPower),
        IntegerEntry(addressTotalStakedKey, addressTotalStaked + 1)
      ] ++ addStringToStateArray(allStakedAddressesKey, addressStr) ++ addressStakedNftsState
    }
  }
  else throw("Invalid payment asset Id or amount")
}

@Callable(i)
func unstake(nftIdStr: String, debug: Boolean) = {
  let addressStr = i.caller.toString()
  let asset = assetInfo(nftIdStr.fromBase58String()).valueOrErrorMessage("Invalid nft Id")
  let ownerAddress = getString("nft_" + nftIdStr + "_owner").valueOrErrorMessage("Owner data invalid")
  if (ownerAddress != addressStr) then throw("You are not the owner")
  else if (asset.checkNFT()) then {
    # global params
    let totalStaked = getInteger(totalStakedKey).valueOrElse(0)
    let totalPower = getInteger(totalPowerKey).valueOrElse(0)

    # address params
    let addressPowerKey = "address_" + addressStr + "_power"
    let addressTotalStakedKey = "address_" + addressStr + "_totalStaked"
    let addressStakedNftsKey = "address_" + addressStr + "_stakedNfts"

    let addressPower = getInteger(addressPowerKey).valueOrErrorMessage("Address power value not found")
    let addressTotalStaked = getInteger(addressTotalStakedKey).valueOrErrorMessage("Address total staked value not found")
    let addressStakedNfts = getString(addressStakedNftsKey).valueOrErrorMessage("Address staked Nfts value not found")

    let nftAssetIdStr = asset.id.toBase58String()
    let nftPower = getIntegerValue("nft_" + nftAssetIdStr + "_power")
    
    let updatedAddressPower = addressPower - nftPower
    let removeStakedAddress = if (updatedAddressPower == 0) then removeItemFromStateArray(allStakedAddressesKey, addressStr) else []

    let addressStakedNftsList = addressStakedNfts.split(",")
    let addressStakedNftIndex = addressStakedNftsList.indexOf(nftIdStr).valueOrErrorMessage("NFT not founed in address staked list")
    [
      ScriptTransfer(i.caller, 1, asset.id),
      IntegerEntry(totalStakedKey, totalStaked - 1),
      IntegerEntry(totalPowerKey, totalPower - nftPower),

      DeleteEntry("nft_" + nftAssetIdStr + "_owner"),
      DeleteEntry("nft_" + nftAssetIdStr + "_power"),

      IntegerEntry(addressPowerKey, updatedAddressPower),
      IntegerEntry(addressTotalStakedKey, addressTotalStaked - 1),

      StringEntry(addressStakedNftsKey, (addressStakedNftsList.removeByIndex(addressStakedNftIndex)).makeString(","))
    ] ++ removeStakedAddress
  }
  else throw("Invalid nft Id")
}

@Callable(i)
func sendToVote(collectionId: String) = {
  let issuer = collectionId.split("_")[0]
  let isExist = match (getString("collection_" + collectionId + "_voteId")) {
      case t:String => true
      case _ => false
    }
  if (issuer.size() == 0) then throw("Collection issuer not found")
  else if (isExist) then throw("Collection has already been submitted for voting")
  else if (issuer != i.caller.toString()) then throw("Only the issuer can submit to the vote")
  else {
    let voteId = sha256_16Kb(collectionId.toBytes()).toBase58String()
    let totalVotes = getInteger("total_votes").valueOrElse(0)
    let quorumLimit = getInteger(votePowerLimitKey).valueOrErrorMessage("Vote power limit not found")
    [
      StringEntry("collection_" + collectionId + "_voteId", voteId),
      StringEntry("vote_" + voteId + "_collectionId", collectionId),
      StringEntry("vote_" + voteId + "_owner", i.caller.toString()),
      IntegerEntry("vote_" + voteId + "_createdAt", height),
      IntegerEntry("vote_" + voteId + "_quorum", quorumLimit),
      IntegerEntry("total_votes", totalVotes + 1)
    ]
  }
}

@Callable(i)
func removeFromVote(voteId: String) = {
  let collectionId = getString("vote_" + voteId + "_collectionId").valueOrErrorMessage("Collection Id not found")
  let owner = getString("vote_" + voteId + "_owner").valueOrErrorMessage("Owner not found")
  if (owner != i.caller.toString()) then throw("You are not the owner")
  else if (isVotingClosed(voteId)) then throw("Voting is closed")
  else {
    let totalVotes = getInteger("total_votes").valueOrErrorMessage("total votes value not found")
    [
      DeleteEntry("collection_" + collectionId + "_voteId"),
      DeleteEntry("vote_" + voteId + "_collectionId"),
      DeleteEntry("vote_" + voteId + "_owner"),
      DeleteEntry("vote_" + voteId + "_createdAt"),
      DeleteEntry("vote_" + voteId + "_quorum"),
      IntegerEntry("total_votes", totalVotes - 1)
    ]
  }
}


@Callable(i)
func voteByNFT(voteId: String, assets: String) = {
  let addressStr = i.caller.toString()
  let collectionId = getString("vote_" + voteId + "_collectionId").valueOrElse("")
  if (isVotingClosed(voteId)) then throw("Voting is closed")
  else if (collectionId.size() == 0) then throw("Collection not found")
  else if (assets.size() == 0) then throw("Assets list is empty")
  else {
    let voteUpPowerKey = "vote_" + voteId + "_upPower"
    let voteDownPowerKey = "vote_" + voteId + "_downPower"
    let voteTotalPowerKey = "vote_" + voteId + "_totalPower"
    let voteUsedNftsKey = "vote_" + voteId + "_usedNfts"

    let voterSpentPowerKey = "voter_" + addressStr + "_spentPower"
    let voterVoteUsedNftsKey = "voter_" + addressStr + "_vote_" + voteId + "_usedNfts"
    let voterVoteSpentPowerKey = "voter_" + addressStr + "_vote_" + voteId + "_spentPower"

    let addressPowerKey = "address_" + addressStr + "_power"
    let addressStakedNftsKey = "address_" + addressStr + "_stakedNfts"

    let upPowerDapp = getInteger(voteUpPowerKey).valueOrElse(0)
    let downPowerDapp = getInteger(voteDownPowerKey).valueOrElse(0)
    let totalVotePower = getInteger(voteTotalPowerKey).valueOrElse(0)
    let voteUsedNfts = getString(voteUsedNftsKey).valueOrElse("")

    let voterSpentPower = getInteger(voterSpentPowerKey).valueOrElse(0)
    let voterVoteUsedNfts = getString(voterVoteUsedNftsKey).valueOrElse("")
    let totalSpentPower = getInteger(totalSpentPowerKey).valueOrElse(0)

    let voterVoteSpentPower = getInteger(voterVoteSpentPowerKey).valueOrElse(0)

    let addressPower = getInteger(addressPowerKey).valueOrErrorMessage("You don't have power")
    let addressStakedNfts = getString(addressStakedNftsKey).valueOrErrorMessage("You don't have staked NFTs")

    let adderssLastRewardRoundKey = "address_" + addressStr + "_lastRewardsRound"

    let currentRewordsRound = getInteger(currentRewordsRoundKey).valueOrElse(0)
    let adderssLastRewardRound = getInteger(adderssLastRewardRoundKey).valueOrElse(0)

    let assetsList = assets.split("|")
    let voteUsedNftsList = if voteUsedNfts.size() == 0 then [] else voteUsedNfts.split_51C(",")
    let voterVoteUsedNftsList = if voterVoteUsedNfts.size() == 0 then [] else voterVoteUsedNfts.split_51C(",")

    func processAssets(accum: (Int, Int, List[String], List[StringEntry]), next: String) = {
      let parts = next.split("_")
      let nftId = parts[0]
      let type = parts[1]
      let power = getInteger("nft_" + nftId + "_power").valueOrErrorMessage("NFT power not found")
      let stakedOwnerIndex = addressStakedNfts.indexOf(nftId).valueOrElse(-1)

      if (power == 0) then throw("Power must be more zero")
      else if(stakedOwnerIndex == -1) then throw("Asset does not belong to you")
      else {
        let assetIndex = voteUsedNftsList.indexOf(nftId).valueOrElse(-1)
        if (assetIndex == -1) then {
          if (type != "up" && type != "down") then throw("Invalid type")
          else {
            (
              accum._1 + if (type == "up") then power else 0,
              accum._2 + if (type == "down") then power else 0,
              accum._3 :+ nftId,
              accum._4 :+ StringEntry("voter_" + addressStr + "_vote_" + voteId + "_assetId_" + nftId, type + ":" + power.toString() + ":" + height.toString()) # type:power:createdAt
            )
          }
        } else accum
      }
    }
    # tuple (upCount, downCount, usedNftsList, stateEntries)
    let processResultTuple = FOLD<5>(assetsList, (0, 0, [], []), processAssets)
    let upPower = processResultTuple._1
    let downPower = processResultTuple._2
    let powerValue = upPower + downPower

    if (powerValue > addressPower) then throw("Power exceeds power of the account")
    else if (powerValue == 0) then throw("Not enough power to vote")
    else if (processResultTuple._3.size() == 0) then throw("Used list must not be empty")
    else if (processResultTuple._4.size() == 0) then throw("State entries list must not be empty")
    else {
      let quorumLimit = getInteger(votePowerLimitKey).valueOrErrorMessage("Vote power limit not found")
      let updateCanditatesList = if (totalVotePower + powerValue > quorumLimit)
        then addStringToStateArray(finalVotingCandidatesKey, voteId)
        else []

      let addressRewordsRoundState = if (adderssLastRewardRound == 0 && currentRewordsRound > adderssLastRewardRound) then {
        [IntegerEntry(adderssLastRewardRoundKey, currentRewordsRound)]
      } else []

      [
        IntegerEntry(voterSpentPowerKey, voterSpentPower + powerValue),
        IntegerEntry(totalSpentPowerKey, totalSpentPower + powerValue),

        IntegerEntry(voteUpPowerKey, upPowerDapp + upPower),
        IntegerEntry(voteDownPowerKey, downPowerDapp + downPower),
        IntegerEntry(voteTotalPowerKey, totalVotePower + powerValue),

        IntegerEntry(voterVoteSpentPowerKey, voterVoteSpentPower + powerValue),
        StringEntry(voterVoteUsedNftsKey, (voterVoteUsedNftsList ++ processResultTuple._3).makeString_11C(",")),

        StringEntry(voteUsedNftsKey, (voteUsedNftsList ++ processResultTuple._3).makeString_11C(","))  
      ] ++ processResultTuple._4 ++ updateCanditatesList ++ addressRewordsRoundState
    }
  }
}

@Callable(i)
func unvoteByNFT(voteId: String, assets: String) = {
  let addressStr = i.caller.toString()
  let collectionId = getString("vote_" + voteId + "_collectionId").valueOrElse("")
  if (isVotingClosed(voteId)) then throw("Voting is closed")
  else if (collectionId.size() == 0) then throw("Collection not found")
  else {
    let voteUpPowerKey = "vote_" + voteId + "_upPower"
    let voteDownPowerKey = "vote_" + voteId + "_downPower"
    let voteTotalPowerKey = "vote_" + voteId + "_totalPower"
    let voteUsedNftsKey = "vote_" + voteId + "_usedNfts"

    let voterSpentPowerKey = "voter_" + addressStr + "_spentPower"
    let voterVoteUsedNftsKey = "voter_" + addressStr + "_vote_" + voteId + "_usedNfts"
    let voterVoteSpentPowerKey = "voter_" + addressStr + "_vote_" + voteId + "_spentPower"

    let addressPowerKey = "address_" + addressStr + "_power"
    let addressStakedNftsKey = "address_" + addressStr + "_stakedNfts"

    let upPowerDapp = getInteger(voteUpPowerKey).valueOrErrorMessage("Up vote power not found")
    let downPowerDapp = getInteger(voteDownPowerKey).valueOrErrorMessage("Down vote power not found")
    let totalVotePower = getInteger(voteTotalPowerKey).valueOrErrorMessage("Total vote power not found")
    let voteUsedNfts = getString(voteUsedNftsKey).valueOrErrorMessage("Vote used power not found")

    let voterSpentPower = getInteger(voterSpentPowerKey).valueOrErrorMessage("Voter spent power not found")
    let voterUsedNfts = getInteger(voterVoteUsedNftsKey).valueOrErrorMessage("Voter vote used nfts not found")
    let voterVoteUsedNfts = getString(voterVoteUsedNftsKey).valueOrErrorMessage("Voter vote used nfts list not found")
    let totalSpentPower = getInteger(totalSpentPowerKey).valueOrErrorMessage("Total spent power not found")

    let voterVoteSpentPower = getInteger(voterVoteSpentPowerKey).valueOrErrorMessage("Address vote spent power not found")

    let addressPower = getInteger(addressPowerKey).valueOrErrorMessage("You don't have power")
    let addressStakedNfts = getString(addressStakedNftsKey).valueOrErrorMessage("You don't have staked NFTs")

    let assetsList =
      if assets.size() > 0 then {
        assets.split("|")
      } else {
        if (voterVoteUsedNfts.size() == 0) then [] else voterVoteUsedNfts.split(",")
      }
    func processAssets(accum: (Int, Int, List[String], List[String], List[DeleteEntry]), next: String) = {
      let assetVote = getString("voter_" + addressStr + "_vote_" + voteId + "_assetId_" + next).valueOrElse("")
      let parts = assetVote.split(":")
      let type = parts[0]
      let power = parseInt(parts[1]).valueOrElse(0)

      let stakedOwnerIndex = addressStakedNfts.indexOf(next).valueOrElse(-1)
      let voterVoteUsedIndex = accum._4.indexOf(next).valueOrErrorMessage("Voter vote used index not found")

      if (assetVote.size() == 0) then accum
      else if (power == 0) then throw("Power must be more zero")
      else if(voterVoteUsedIndex < 0 && stakedOwnerIndex == -1) then throw("Asset does not belong to you")
      else {
        let assetUsedIndex = accum._3.indexOf(next).valueOrElse(-1)
        if (assetUsedIndex >= 0) then {
          if (type != "up" && type != "down") then throw("Invalid type")
          else {
            (
              accum._1 + if (type == "up") then power else 0,
              accum._2 + if (type == "down") then power else 0,
              accum._3.removeByIndex(assetUsedIndex),
              accum._4.removeByIndex(voterVoteUsedIndex),
              accum._5 :+ DeleteEntry("voter_" + addressStr + "_vote_" + voteId + "_assetId_" + next)
            )
          }
        } else accum
      }
    }
    # tuple (upCount, downCount, usedNftsList, voterVoteUsedNfts, stateEntries)
    let processResultTuple = FOLD<5>(assetsList, (0, 0, voteUsedNfts.split_51C(","), voterVoteUsedNfts.split_51C(","), []), processAssets)
    let upPower = processResultTuple._1
    let downPower = processResultTuple._2
    let powerValue = upPower + downPower

    if (powerValue > voterSpentPower) then throw("Power value exceeds voter spent power")
    else if (powerValue == 0) then throw("Not enough power to unvote")
    else if (processResultTuple._5.size() == 0) then throw("State entries list must not be empty")
    else {
      let quorumLimit = getInteger(votePowerLimitKey).valueOrErrorMessage("Vote power limit not found")
      let updateCanditatesList = if (totalVotePower - powerValue < quorumLimit) then removeItemFromStateArray(finalVotingCandidatesKey, voteId) else []
      [
        IntegerEntry(voterSpentPowerKey, voterSpentPower - powerValue),
        IntegerEntry(totalSpentPowerKey, totalSpentPower - powerValue),

        IntegerEntry(voteUpPowerKey, upPowerDapp - upPower),
        IntegerEntry(voteDownPowerKey, downPowerDapp - downPower),
        IntegerEntry(voteTotalPowerKey, totalVotePower - powerValue),

        IntegerEntry(voterVoteSpentPowerKey, voterVoteSpentPower - powerValue),
        StringEntry(voterVoteUsedNftsKey, processResultTuple._4.makeString_11C(",")),

        StringEntry(voteUsedNftsKey, processResultTuple._3.makeString_11C(","))
      ] ++ processResultTuple._5 ++ updateCanditatesList
    }
  }
}

@Callable(i)
func fillTreasuary() = {
  if (i.payments.size() == 0) then throw("No payment")
  else if (i.payments[0].amount == 0) then throw("Payment must be more 0")
  else if (i.payments[0].assetId != USDTAssetId && i.payments[0].assetId != PUZZLEAssetId) then throw("Payment must be in USDT or Puzzle")
  else {
    let amount = i.payments[0].amount
    let assetId = i.payments[0].assetId.value()

    let finalVotingCandidates = getString(finalVotingCandidatesKey).valueOrElse("")
    if (finalVotingCandidates.size() == 0) then throw("Canditates list is empty")
    else {
      func processVote(accum: (Int, List[String], List[BooleanEntry], String), next: String) = {
        let voteId = next
        let voteUpPowerKey = "vote_" + voteId + "_upPower"
        let voteDownPowerKey = "vote_" + voteId + "_downPower"
        let voteTotalPowerKey = "vote_" + voteId + "_totalPower"

        let voteExist = match(getString("vote_" + voteId + "_collectionId")) {
          case s:String => s.size() > 0
          case _ => false
        }

        let voteUpPower = getInteger(voteUpPowerKey).valueOrElse(0)
        let voteDownPower = getInteger(voteDownPowerKey).valueOrElse(0)
        let voteTotalPower = getInteger(voteTotalPowerKey).valueOrElse(0)

        let quorumLimit = getInteger(votePowerLimitKey).valueOrErrorMessage("Vote power limit not found")

        if (voteTotalPower == 0) then throw("Invalid total power")
        else if (voteTotalPower < quorumLimit) then throw("Power less than limit")
        else if (voteUpPower + voteDownPower == 0) then throw("Invalid up, down power")
        else if (!voteExist || isVotingClosed(voteId)) then {
          (
            accum._1,
            accum._2,
            accum._3,
            removeItemFromStr(accum._4, voteId)
          )
        }
        else {
          let upPercent = fraction(voteUpPower, 100, voteTotalPower)
          let finalVoteState =
            if (upPercent > 50)
              then BooleanEntry("vote_" + voteId + "_confirmed", true)
              else BooleanEntry("vote_" + voteId + "_rejected", true)
          (
            accum._1 + voteTotalPower,
            accum._2 :+ voteId,
            accum._3 :+ finalVoteState,
            removeItemFromStr(accum._4, voteId)
          )
        }
      }
      let finalVotingCandidatesList = finalVotingCandidates.split(",")
      let resultTuple = FOLD<10>(finalVotingCandidatesList, (0, [], [], finalVotingCandidates), processVote)
      let allEndVotesPower = resultTuple._1
      let finalVotesList = resultTuple._2
      let finalVotesState = resultTuple._3
      let updatedListFinalCanditatesStr = resultTuple._4

      if (allEndVotesPower == 0) then throw("No power after process canditates")
      else {
        let currentRewordsRound = getInteger(currentRewordsRoundKey).valueOrElse(0)
        let costPerPower = fraction(amount, 1, allEndVotesPower)

        let treasuaryAssetIdTotalKey = "treasuary_" + assetId.toBase58String() + "_total"
        let treasuaryAssetIdAvailableKey = "treasuary_" + assetId.toBase58String() + "_available"

        let treasuaryAssetIdTotal = getInteger(treasuaryAssetIdTotalKey).valueOrElse(0)
        let treasuaryAssetIdAvailable = getInteger(treasuaryAssetIdAvailableKey).valueOrElse(0)
        [
          StringEntry("reward_" + currentRewordsRound.toString() + "_votesIds", finalVotesList.makeString(",")),
          StringEntry("reward_" + currentRewordsRound.toString() + "_assetId", assetId.toBase58String()),
          IntegerEntry("reward_" + currentRewordsRound.toString() + "_costPerPower", costPerPower),
          IntegerEntry("reward_" + currentRewordsRound.toString() + "_paidPower", allEndVotesPower),

          IntegerEntry(treasuaryAssetIdTotalKey, treasuaryAssetIdTotal + amount),
          IntegerEntry(treasuaryAssetIdAvailableKey, treasuaryAssetIdAvailable + amount),

          StringEntry(finalVotingCandidatesKey, updatedListFinalCanditatesStr),

          IntegerEntry(currentRewordsRoundKey, currentRewordsRound + 1)
        ] ++ finalVotesState
      }
    }
  }
}

@Callable(i)
func claimRewards() = {
  let addressStr = i.caller.toString()

  let adderssLastRewardRoundKey = "address_" + addressStr + "_lastRewardsRound"

  let currentRewordsRound = getInteger(currentRewordsRoundKey).valueOrElse(0)
  let adderssLastRewardRound = getInteger(adderssLastRewardRoundKey).valueOrElse(0)

  if (currentRewordsRound == adderssLastRewardRound) then throw("There were no new payments")
  else {
    func calcRewardsRound(accum: (Int, List[ScriptTransfer|IntegerEntry]), next: Int) = {
      if (accum._1 >= currentRewordsRound) then accum
      else {
        let votesIds = getString("reward_" + accum._1.toString() + "_votesIds").valueOrErrorMessage("Reward votes ids not found")
        let assetId = getString("reward_" + accum._1.toString() + "_assetId").valueOrErrorMessage("Reward assetId not found")
        let costPower = getInteger("reward_" + accum._1.toString() + "_costPerPower").valueOrErrorMessage("Reward cost power not found")

        let treasuaryAssetIdClaimedKey = "treasuary_" + assetId + "_claimed"
        let treasuaryAssetIdAvailableKey = "treasuary_" + assetId + "_available"
        let treasuaryAssetIdClaimed = getInteger(treasuaryAssetIdClaimedKey).valueOrElse(0)
        let treasuaryAssetIdAvailable = getInteger(treasuaryAssetIdAvailableKey).valueOrErrorMessage("Treasuary assetId not found")

        let addressAssetIdClaimedKey = "rewardRound_" + accum._1.toString() + "_address_" + addressStr + "_assetId_" + assetId + "_claimed"
        let addressAssetIdClaimed = getInteger(addressAssetIdClaimedKey).valueOrElse(0)

        if (treasuaryAssetIdAvailable <= 0) then throw("Treasuary asset Id is empty")
        else if (votesIds.size() == 0) then throw("Vote ids list are empty")
        else if (assetId.size() == 0) then throw("Asset id is empty")
        else if (costPower == 0 || costPower < 0) then throw("Invalid cost power")
        else {
          func calcAddressSpentPower(accum: Int, next: String) = {
            let voteId = next
            let addressSpentPower = getInteger("voter_" + addressStr + "_vote_" + voteId + "_spentPower").valueOrElse(0)
            accum + addressSpentPower
          }
          let spentPower = FOLD<10>(votesIds.split(","), 0, calcAddressSpentPower)
          if (spentPower <= 0 || addressAssetIdClaimed > 0) then {
            # skip
            (
              accum._1 + next,
              accum._2
            )
          } else {
            (
              accum._1 + next,
              accum._2 ++ [
                ScriptTransfer(i.caller, spentPower * costPower, assetId.fromBase58String()),
                IntegerEntry(addressAssetIdClaimedKey, spentPower * costPower),
                IntegerEntry(treasuaryAssetIdClaimedKey, treasuaryAssetIdClaimed + spentPower * costPower),
                IntegerEntry(treasuaryAssetIdAvailableKey, treasuaryAssetIdAvailable - spentPower * costPower)
              ]
            )
          }
        }
      }
    }
    # process 5 last rewards
    let r = FOLD<5>([1,1,1,1,1], (adderssLastRewardRound, []), calcRewardsRound)
    [
      IntegerEntry(adderssLastRewardRoundKey, r._1)
    ] ++ r._2
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)